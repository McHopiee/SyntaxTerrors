Title: "Lists"
Description: "Lists are one of the most essential data structures in programming. They allow developers to store, organize, and manipulate groups of values efficiently. This section introduces list concepts, operations, and use cases."
Topics:
  - title: "Creating Lists"
    keyPoints:
      - "Define lists with <span class='bg-neutral-700 px-1 rounded text-blue-500'>[]</span>"
      - "Store multiple values"
      - "Mix data types"
    jsCode: |
      let fruits = ["apple", "banana", "cherry"];
      console.log(fruits);
    jsExplanation: |
      In JavaScript, you create a list (called an array) using <span class='bg-neutral-700 px-1 rounded text-red-500'>[]</span>.<br>
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>let fruits = ["apple", "banana", "cherry"];</span> creates an array called <span class='font-bold'>fruits</span> with three items.</li>
        <li>Arrays can hold numbers, strings, or even other arrays.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>console.log(fruits);</span> prints the array to the console.</li>
      </ul>
      Arrays are a flexible way to store groups of values in JavaScript.
    pyCode: |
      fruits = ["apple", "banana", "cherry"]
      print(fruits)
    pyExplanation: |
      In Python, you create a list using <span class='bg-neutral-700 px-1 rounded text-blue-500'>[]</span>.<br>
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>fruits = ["apple", "banana", "cherry"]</span> creates a list called <span class='font-bold'>fruits</span> with three items.</li>
        <li>Lists can hold numbers, strings, or even other lists.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>print(fruits)</span> displays the list.</li>
      </ul>
      Lists are a basic way to store and organize data in Python.

  - title: "Accessing Elements"
    keyPoints:
      - "Use indexes to access items"
      - "Start counting at <span class='bg-neutral-700 px-1 rounded text-blue-500'>0</span>"
      - "Access first, last, or middle elements"
    jsCode: |
      let fruits = ["apple", "banana", "cherry"];
      console.log(fruits[0]); // apple
      console.log(fruits[2]); // cherry
    jsExplanation: |
      JavaScript arrays are <span class='font-bold'>zero-indexed</span>, meaning the first item is at position <span class='bg-neutral-700 px-1 rounded text-red-500'>0</span>.<br>
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>fruits[0]</span> gets the first item ("apple").</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>fruits[2]</span> gets the third item ("cherry").</li>
      </ul>
      Use indexes to access any element in the array.
    pyCode: |
      fruits = ["apple", "banana", "cherry"]
      print(fruits[0])  # apple
      print(fruits[2])  # cherry
    pyExplanation: |
      Python lists are <span class='font-bold'>zero-indexed</span>, so the first item is at position <span class='bg-neutral-700 px-1 rounded text-blue-500'>0</span>.<br>
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>fruits[0]</span> gets the first item ("apple").</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>fruits[2]</span> gets the third item ("cherry").</li>
      </ul>
      Use indexes to access any element in the list.

  - title: "Modifying Lists"
    keyPoints:
      - "Change values by index"
      - "Update existing items"
      - "Keep lists dynamic"
    jsCode: |
      let fruits = ["apple", "banana", "cherry"];
      fruits[1] = "blueberry";
      console.log(fruits);
    jsExplanation: |
      You can change an array item by assigning a new value to its index.<br>
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>fruits[1] = "blueberry";</span> replaces "banana" with "blueberry".</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>console.log(fruits);</span> prints the updated array.</li>
      </ul>
      Arrays are dynamic and can be changed anytime.
    pyCode: |
      fruits = ["apple", "banana", "cherry"]
      fruits[1] = "blueberry"
      print(fruits)
    pyExplanation: |
      You can change a list item by assigning a new value to its index.<br>
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>fruits[1] = "blueberry"</span> replaces "banana" with "blueberry".</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>print(fruits)</span> prints the updated list.</li>
      </ul>
      Lists are dynamic and can be changed anytime.

  - title: "Adding Elements"
    keyPoints:
      - "Use <span class='bg-neutral-700 px-1 rounded text-blue-500'>append</span>/<span class='bg-neutral-700 px-1 rounded text-red-500'>push</span> to add to the end"
      - "Insert at specific positions"
      - "Grow lists dynamically"
    jsCode: |
      let fruits = ["apple", "banana"];
      fruits.push("cherry");
      fruits.splice(1, 0, "blueberry");
      console.log(fruits);
    jsExplanation: |
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>push()</span> adds an item to the end of the array.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>splice()</span> can insert items at any position.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>console.log(fruits);</span> prints the final array.</li>
      </ul>
      Arrays can grow as you add more items.
    pyCode: |
      fruits = ["apple", "banana"]
      fruits.append("cherry")
      fruits.insert(1, "blueberry")
      print(fruits)
    pyExplanation: |
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>append()</span> adds an item to the end of the list.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>insert()</span> can add items at any position.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>print(fruits)</span> prints the final list.</li>
      </ul>
      Lists can grow as you add more items.

  - title: "Removing Elements"
    keyPoints:
      - "Remove by value"
      - "Remove by index"
      - "Pop the last element"
    jsCode: |
      let fruits = ["apple", "banana", "cherry"];
      fruits.splice(1, 1);
      fruits.pop();
      console.log(fruits);
    jsExplanation: |
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>splice()</span> removes items by index.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>pop()</span> removes the last item.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>console.log(fruits);</span> prints the updated array.</li>
      </ul>
      You can remove items from arrays by value or index.
    pyCode: |
      fruits = ["apple", "banana", "cherry"]
      fruits.remove("banana")
      fruits.pop(0)
      print(fruits)
    pyExplanation: |
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>remove()</span> removes an item by value.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>pop()</span> removes an item by index (default is last).</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>print(fruits)</span> prints the updated list.</li>
      </ul>
      You can remove items from lists by value or index.

  - title: "Looping Through Lists"
    keyPoints:
      - "Use <span class='bg-neutral-700 px-1 rounded text-blue-500'>for</span> loops to iterate"
      - "Process each element"
      - "Use <span class='bg-neutral-700 px-1 rounded text-red-500'>for...of</span> in JavaScript"
    jsCode: |
      let fruits = ["apple", "banana", "cherry"];
      for (let fruit of fruits) {
          console.log(fruit);
      }
    jsExplanation: |
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>for...of</span> loops go through each item in the array.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-red-500'>console.log(fruit);</span> prints each item.</li>
      </ul>
      Looping lets you process every element in an array.
    pyCode: |
      fruits = ["apple", "banana", "cherry"]
      for fruit in fruits:
          print(fruit)
    pyExplanation: |
      <ul>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>for</span> loops go through each item in the list.</li>
        <li><span class='bg-neutral-700 px-1 rounded text-blue-500'>print(fruit)</span> prints each item.</li>
      </ul>
      Looping lets you process every element in a list.